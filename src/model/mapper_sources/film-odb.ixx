// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

// Begin prologue.
//
//
// End prologue.

namespace odb
{
  // Film
  //

  inline
  access::object_traits< ::Film >::id_type
  access::object_traits< ::Film >::
  id (const object_type& obj)
  {
    return obj.id_;
  }

  inline
  void access::object_traits< ::Film >::
  erase (database& db, const object_type& obj)
  {
    erase (db, id (obj));
  }

  inline
  void access::object_traits< ::Film >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Film >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  access::object_traits< ::Film >::query_type::
  query_type ()
  {
  }

  inline
  access::object_traits< ::Film >::query_type::
  query_type (bool v)
    : query_base_type (v)
  {
  }

  inline
  access::object_traits< ::Film >::query_type::
  query_type (const char* q)
    : query_base_type (q)
  {
  }

  inline
  access::object_traits< ::Film >::query_type::
  query_type (const std::string& q)
    : query_base_type (q)
  {
  }

  inline
  access::object_traits< ::Film >::query_type::
  query_type (const query_base_type& q)
    : query_base_type (q)
  {
  }

  // film_stat
  //

  inline
  access::view_traits< ::film_stat >::query_type::
  query_type ()
  {
  }

  inline
  access::view_traits< ::film_stat >::query_type::
  query_type (bool v)
    : query_base_type (v)
  {
  }

  inline
  access::view_traits< ::film_stat >::query_type::
  query_type (const char* q)
    : query_base_type (q)
  {
  }

  inline
  access::view_traits< ::film_stat >::query_type::
  query_type (const std::string& q)
    : query_base_type (q)
  {
  }

  inline
  access::view_traits< ::film_stat >::query_type::
  query_type (const query_base_type& q)
    : query_base_type (q)
  {
  }

  inline
  void access::view_traits< ::film_stat >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

// Begin epilogue.
//
//
// End epilogue.
